# -*- coding: utf-8 -*-
"""Logistica_python_dados.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eBVEWM1lMbe4Q-P9Z2hQT8wu-tqIBlvv

# **Análise Exploratória de Dados de Logística da Loggi**

# **1. Contexto**
<a id="section-1"></a>

Este projeto tem como objetivo realizar uma análise exploratória dos dados de entregas disponibilizados para o curso de Analista de Dados da EBAC. Através da análise de gráficos e insights gerados, buscaremos responder às seguintes questões:

1. Qual é a distribuição do peso das entregas por região de origem? Existe uma faixa de peso que ocorre com mais frequência?

2. Regiões de destino com maior volume de entregas: Quais são as regiões de destino que recebem o maior volume de entregas?

3. Regiões de origem com maior participação no volume total de entregas: Quais são as regiões de origem que contribuem com a maior parte do volume total de entregas?

O projeto será realizado nas seguintes etapas:

Importação de pacotes e bibliotecas: Nesta etapa, importaremos todas as bibliotecas e pacotes necessários para a análise.

Exploração de dados: Aqui, faremos uma exploração inicial dos dados para entender suas características e estrutura.

Manipulação de dados: Nesta etapa, limparemos e transformaremos os dados conforme necessário para a análise.

<a id="section-2"></a>
# **2. Pacotes e bibliotecas**
"""

# instalando pacote geopandas no ambiente virtual

!pip3 install geopandas;

# importando bibliotecas

import json
import geopandas
import geopy
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

from geopy.extra.rate_limiter import RateLimiter
from geopy.geocoders import Nominatim

"""<a id="section-3"></a>
# **3. Exploração de dados**

A exploração de dados é uma etapa fundamental , pois permite entender melhor os dados e identifiquem padrões e tendências.
Os bairros com maior volume de entregas: Isso pode indicar que esses bairros são centros comerciais ou industriais, ou que estão localizados em áreas de alta densidade populacional.
A recorrência em cada bairro: Isso pode indicar as necessidades dos clientes e as oportunidades de mercado.
Os horários de pico de entregas: Isso pode ajudar a otimizar as operações logísticas.

<a id="section-3.1"></a>
# 3. 1.  Coleta de Dados
"""

# coletando dados da Loggi no github em formato json

!wget -q "https://raw.githubusercontent.com/andre-marcos-perez/ebac-course-utils/main/dataset/deliveries.json" -O deliveries.json

# extraindo dados brutos para um dict

with open('deliveries.json', mode='r', encoding='utf8') as file:
  data = json.load(file)

# checando quantidade de registros do arquivo
len(data)

# extraindo exemplo para exploração

example = data[0]

# consultando chaves da estrutura

example.keys()

# explorando valores de cada chave estrutural

for key in example:
  print(key + ' ' + str(type(example[key])) + ' : ' + str(example[key]) + '\n')

example['deliveries'][0]

"""<a id="section-3.2"></a>
# 3. 2. Data Wrangling

"""

# criando dataframe pandas através dos dados brutos

deliveries_df = pd.DataFrame(data)
deliveries_df.head()

"""* Extraindo e manipulando dados da coluna origin"""

# achatando dados (flatten)
hub_origin_df = pd.json_normalize(deliveries_df['origin'])
hub_origin_df.head()

# realizando merge dos dados ajustados com o dataframe original

deliveries_df = pd.merge(left=deliveries_df, right=hub_origin_df, how='inner', left_index=True, right_index=True)
deliveries_df.head()

# removendo coluna origin
deliveries_df = deliveries_df.drop('origin', axis=1)

# reorganizando ordem das colunas
deliveries_df = deliveries_df[['name', 'region', 'lng', 'lat', 'vehicle_capacity', 'deliveries']]

# renomeando colunas lng e lat
deliveries_df.rename(columns={'lng': 'hub_lng', 'lat': 'hub_lat'}, inplace=True)

deliveries_df.head()

# Usando o 'exploded' nos dados da coluna deliveries

deliveries_exploded_df = deliveries_df[["deliveries"]].explode("deliveries")
deliveries_exploded_df.head()

# normalizando dados explodidos para combina-los ao dataframe original

deliveries_normalized_df = pd.concat([
  pd.DataFrame(deliveries_exploded_df["deliveries"].apply(lambda record: record["size"])).rename(columns={"deliveries": "delivery_size"}),
  pd.DataFrame(deliveries_exploded_df["deliveries"].apply(lambda record: record["point"]["lng"])).rename(columns={"deliveries": "delivery_lng"}),
  pd.DataFrame(deliveries_exploded_df["deliveries"].apply(lambda record: record["point"]["lat"])).rename(columns={"deliveries": "delivery_lat"}),
], axis= 1)

deliveries_normalized_df.head(10)

# contagem de registros do dataframe normalizado

len(deliveries_exploded_df)

# contagem de registros do dataframe original

len(deliveries_df)

# removendo coluna deliveries
deliveries_df = deliveries_df.drop("deliveries", axis=1)

# realizando merge dos dados normalizados com o dataframe original
deliveries_df = pd.merge(left=deliveries_df, right=deliveries_normalized_df, how='right', left_index=True, right_index=True)

#resetando index após merge para manter identificação de cada entrega/destino por linha
deliveries_df.reset_index(inplace=True, drop=True)

deliveries_df.head()

"""# A coluna delivery possuia os dados de várias entregas concatenadas, o indíce foi mantido após a explosão e normalização desses dados, o merge será realizado mantendo a intersecção entre os valores com match de indíce na tabela normalizada (right merge)"""

# conferindo contagem de registros após o merge

len(deliveries_df)

"""<a id="section-3.3"></a>
# 3. 3. Estrutura

# Checando a estrutura de dados após operações de Data Wrangling
"""

# checando contagem de linha e colunas do dataframe

deliveries_df.shape

# checando colunas

deliveries_df.columns

# checando índice

deliveries_df.index

# informações adicionais com método info()

deliveries_df.info()

"""<a id="section-3.4"></a>
# 3. 4. Schema

# Análise schema no dataframe
"""

# colunas e exemplos dos dados

deliveries_df.head(n=10)

# colunas e seus respectivos tipos de dados

deliveries_df.dtypes

# método describe nas colunas categóricas

deliveries_df.select_dtypes('object').describe().transpose()

# método describe nas colunas numéricas

deliveries_df.drop(['name', 'region'], axis=1).select_dtypes('int64').describe().transpose()

"""<a id="section-3.5"></a>
# 3. 5. Dados Faltantes

* Como o pandas está ciente do que é um dados faltante, a remoção das linhas problemáticas é trivial.
"""

# checando existência de dados nulos / nan

deliveries_df.isna().any()

deliveries_df.shape

"""<a id="section-4"></a>
# **4. Manipulação**

<a id="section-4.1"></a>
# 4. 1. Geoprocessamento

* Geocodificação reversa dos dados de origem
"""

# extraindo dados para geocodificação reversa dos hubs

hub_df = deliveries_df[["region", "hub_lng", "hub_lat"]]
hub_df = hub_df.drop_duplicates().sort_values(by="region").reset_index(drop=True)
hub_df.head()

# aplicando geocodificação nas coordenadas dos hubs

geolocator = Nominatim(user_agent="ebac_geocoder")

geocoder = RateLimiter(geolocator.reverse, min_delay_seconds=1)

hub_df["coordinates"] = hub_df["hub_lat"].astype(str)  + ", " + hub_df["hub_lng"].astype(str)
hub_df["geodata"] = hub_df["coordinates"].apply(geocoder)
hub_df.head()

# extraindo dados na coluna geodata

hub_geodata_df = pd.json_normalize(hub_df["geodata"].apply(lambda data: data.raw))
hub_geodata_df.head()

# mantendo colunas de interesse (town, suburb e city)
hub_geodata_df = hub_geodata_df[["address.town", "address.suburb", "address.city"]]

# renomeando colunas
hub_geodata_df.rename(columns={"address.town": "hub_town", "address.suburb": "hub_suburb", "address.city": "hub_city"}, inplace=True)

# preenchendo valores nos campos NA (discrepância entre bairro/cidade)
hub_geodata_df["hub_city"] = np.where(hub_geodata_df["hub_city"].notna(), hub_geodata_df["hub_city"], hub_geodata_df["hub_town"])
hub_geodata_df["hub_suburb"] = np.where(hub_geodata_df["hub_suburb"].notna(), hub_geodata_df["hub_suburb"], hub_geodata_df["hub_city"])

# removendo coluna town
hub_geodata_df = hub_geodata_df.drop("hub_town", axis=1)
hub_geodata_df

# enriquecendo dados dos hubs
hub_df = pd.merge(left=hub_df, right=hub_geodata_df, left_index=True, right_index=True)
hub_df = hub_df[["region", "hub_suburb", "hub_city"]]
hub_df.head()

# realizando o merge do dataframe hub_df com o original deliveries_df
deliveries_df = pd.merge(left=deliveries_df, right=hub_df, how="inner", on="region")

# reorganizando ordem das colunas
deliveries_df = deliveries_df[["name", "region", "hub_lng", "hub_lat", "hub_city", "hub_suburb", "vehicle_capacity", "delivery_size", "delivery_lng", "delivery_lat"]]
deliveries_df.head()

"""# Geocodificação reversa dos dados das entregas

* Dados extraídos em instalação local na máquina do instrutor e disponibilizados via github
"""

# coletando dados

!wget -q "https://raw.githubusercontent.com/andre-marcos-perez/ebac-course-utils/main/dataset/deliveries-geodata.csv" -O deliveries-geodata.csv

# criando dataframe a partir dos dados csv

deliveries_geodata_df = pd.read_csv("deliveries-geodata.csv")

deliveries_geodata_df.head()

# realizando o merge da geolocalização dos destinos

deliveries_df = pd.merge(left=deliveries_df, right=deliveries_geodata_df[["delivery_city", "delivery_suburb"]], how="inner", left_index=True, right_index=True)

deliveries_df.head()

"""
<a id="section-4.2"></a>
# 4. 2. Qualidade

* Verificando qualidade dos dados após operações de enriquecimento"""

# método info()
# checando contagem de valores não nulos e tipos de dados

deliveries_df.info()

# checando colunas que contenham valores NA (None ou NaN)

deliveries_df.isna().any()

# checando porcentagem de valores NA na coluna delivery_city

100 * (deliveries_df["delivery_city"].isna().sum() / len(deliveries_df))

# checando porcentagem de valores NA na coluna delivery_suburb

100 * (deliveries_df["delivery_suburb"].isna().sum() / len(deliveries_df))

# checando proporção de registros para coluna delivery_city
prop_df = deliveries_df[["delivery_city"]].value_counts() / len(deliveries_df)
prop_df.sort_values(ascending=False).head(10)

# checando proporção de registros para coluna delivery_suburb

prop_df = deliveries_df[["delivery_suburb"]].value_counts() / len(deliveries_df)
prop_df.sort_values(ascending=False).head(10)

"""<a id="section-5"></a>
# **5. Visualização**

<a id="section-5.1"></a>
# 5. 1. Proporção de Entregas por Região de Origem
"""

data = pd.DataFrame(deliveries_df[['region', 'vehicle_capacity']].value_counts(normalize=True)).reset_index()
data.rename(columns={0: "region_percent"}, inplace=True)

data.head()

with sns.axes_style('whitegrid'):
  grafico = sns.barplot(data=data, x="region", y="region_percent", ci=None, palette="pastel")
  grafico.set(title='Proporção de entregas por região de origem', xlabel='Região', ylabel='Proporção');

"""**Insights**

* O gráfico mostra a proporção de entregas por região de origem. É possível observar que a região A é a que concentra o maior número de entregas, com uma proporção de 47,89%. Em seguida, vem a região B, com 41,08%, e a região C, com 11,02%.

* Essa distribuição pode ser explicada por diversos fatores, como a população, a densidade populacional, a economia e a infraestrutura de cada região. Por exemplo, a região A pode ser uma região mais populosa e com maior densidade populacional, o que pode levar a um maior número de entregas.

* Outro insight que pode ser extraído do gráfico é que a proporção de entregas é bastante desigual entre as regiões. A região A concentra quase metade de todas as entregas, enquanto as regiões B e C concentram apenas cerca de 52%.

* Essa desigualdade pode ter implicações para as empresas de logística, que podem precisar adaptar sua estratégia de distribuição para atender às diferentes necessidades de cada região. Por exemplo, as empresas podem precisar investir mais em infraestrutura na região A para atender à demanda por entregas.

<a id="section-5.2"></a>
# 5. 2. Distribuição de Peso da Entrega por Região
"""

with sns.axes_style('whitegrid'):

  grafico = sns.boxplot(x=deliveries_df["delivery_size"], y=deliveries_df["region"])
  grafico.set(title="Distribuição de peso da entrega por região", xlabel="Peso", ylabel="Região")

"""**Insights**

* A região df-0 apresenta um volume de entregas maior, com uma distribuição mais uniforme de peso e uma maior proporção de veículos de grande capacidade. Isso sugere que a região df-0 é uma região com uma economia mais desenvolvida, com uma população mais diversificada e com clientes que demandam entregas de produtos de diferentes pesos.

* A região df-2 apresenta um volume de entregas menor, com uma distribuição mais desigual de peso e uma maior proporção de veículos de pequena capacidade. Isso sugere que a região df-2 é uma região com uma economia menos desenvolvida, com uma população menos diversificada e com clientes que demandam entregas de produtos de pequeno porte.

* Essas informações podem ser utilizadas pelas empresas de logística para tomar decisões estratégicas sobre como atender às diferentes necessidades de cada região. Por exemplo, as empresas podem investir mais em infraestrutura na região DF para atender à demanda por entregas, enquanto podem investir mais em veículos de pequeno porte para atender às necessidades da região df-2.

<a id="section-5.3"></a>
# 5. 3. Proporção de Entregas por Região de Destino
"""

with sns.axes_style('whitegrid'):
  grafico = sns.countplot(data=deliveries_df, y='delivery_city', order = deliveries_df['delivery_city'].value_counts().index)
  grafico.set(title='Proporção de entregas por região de destino', ylabel='região de destino', xlabel='Contagem');
  grafico.figure.set_size_inches(w=20/2.54, h=35/2.54)

"""**Insights**

* O gráfico mostra que a região de destino com o maior número de entregas é Brasília, com 60% do total. Em seguida, vem Taguatinga, com 20%, e Sudoeste / Octogonal, com 10%. As demais regiões representam apenas 10% do total de entregas.

* A imagem também mostra que Taguatinga e Sudoeste / Octogonal são outras regiões importantes para a empresa. Essas regiões também são centros urbanos com uma população significativa.

* As demais regiões representam uma parcela menor do total de entregas. Isso sugere que essas regiões são menos populosas ou têm uma economia menos desenvolvida.

* A empresa pode usar essas informações para tomar decisões estratégicas sobre como atender às necessidades de seus clientes em diferentes regiões. Por exemplo, a empresa pode investir mais em infraestrutura em Brasília para atender à demanda por entregas. Também pode investir em campanhas de marketing para promover seus produtos e serviços em Taguatinga e Sudoeste / Octogonal.

<a id="section-5.3.1"></a>
#### 5. 3. 1. Proporção de entregas por região de destino (removendo 'Brasília')
"""

data = deliveries_df.query('delivery_city != "Brasília"')

with sns.axes_style('whitegrid'):
  grafico = sns.countplot(data=data, y='delivery_city', order = data['delivery_city'].value_counts().index)
  grafico.set(title='Proporção de entregas por região de destino', ylabel='Região de destino', xlabel='Contagem');
  grafico.figure.set_size_inches(w=20/2.54, h=35/2.54)

"""**Insights**

* A imagem também mostra que a região de destino "Outras" concentra apenas 10% das entregas. Isso sugere que a empresa pode estar perdendo oportunidades de atender às necessidades de clientes em regiões menos populosas ou desenvolvidas. A empresa pode explorar maneiras de expandir sua presença nessas regiões.

* Por exemplo, a empresa pode investir em parcerias com empresas locais para oferecer entregas nessas regiões. Também pode oferecer incentivos para incentivar os clientes a realizar entregas para essas regiões.

<a id="section-5.4"></a>
# 5. 4. Entregas no Distrito Federal por Região de Origem
"""

# coletando dados cartográficos / shapefiles do distrito federal

!wget -q "https://geoftp.ibge.gov.br/cartas_e_mapas/bases_cartograficas_continuas/bc100/go_df/versao2016/shapefile/bc100_go_df_shp.zip" -O distrito-federal.zip
!unzip -q distrito-federal.zip -d ./maps
!cp ./maps/LIM_Unidade_Federacao_A.shp ./distrito-federal.shp
!cp ./maps/LIM_Unidade_Federacao_A.shx ./distrito-federal.shx

mapa = geopandas.read_file("distrito-federal.shp")
mapa = mapa.loc[[0]]
mapa.head()

hub_df = deliveries_df[["region", "hub_lng", "hub_lat"]].drop_duplicates().reset_index(drop=True)
geo_hub_df = geopandas.GeoDataFrame(hub_df, geometry=geopandas.points_from_xy(hub_df["hub_lng"], hub_df["hub_lat"]))
geo_hub_df.head()

geo_deliveries_df = geopandas.GeoDataFrame(deliveries_df, geometry=geopandas.points_from_xy(deliveries_df["delivery_lng"], deliveries_df["delivery_lat"]))
geo_deliveries_df.head()

# cria o plot vazio
fig, ax = plt.subplots(figsize = (60/2.54, 60/2.54))

# plot mapa do distrito federal
mapa.plot(ax=ax, alpha=0.4, color="lightgrey")

# plot das entregas
geo_deliveries_df.query("region == 'df-0'").plot(ax=ax, markersize=geo_deliveries_df["delivery_size"] * 2, color="red", label="df-0")
geo_deliveries_df.query("region == 'df-1'").plot(ax=ax, markersize=geo_deliveries_df["delivery_size"] * 2, color="blue", label="df-1")
geo_deliveries_df.query("region == 'df-2'").plot(ax=ax, markersize=geo_deliveries_df["delivery_size"] * 2, color="seagreen", label="df-2")

# plot dos hubs
geo_hub_df.plot(ax=ax, markersize=30, marker="x", color="black", label="hub")

# plot da legenda
plt.title("Entregas no Distrito Federal por Região", fontdict={"fontsize": 16})
lgnd = plt.legend(prop={"size": 15})
for handle in lgnd.legendHandles:
    handle.set_sizes([50])

"""**Insights**

* Distribuição de entregas por região: É possível visualizar a concentração de entregas em diferentes regiões do DF, identificando áreas com maior ou menor demanda.

* Localização de hubs: O mapa mostra a localização dos hubs, permitindo analisar a cobertura da rede de distribuição e sua proximidade com as áreas de entrega.

* Tamanho das entregas: O tamanho dos marcadores indica o tamanho das entregas, o que pode ajudar a identificar padrões de demanda por diferentes tipos de produtos ou serviços.

* Relação entre hubs e entregas: É possível observar se as entregas estão concentradas ao redor dos hubs ou se há áreas com baixa cobertura.

<a id="section-5.5"></a>
# 5. 5. Peso da Carga por Frequência e Região
"""

data = pd.DataFrame(deliveries_df[['region', 'delivery_size']].value_counts()).reset_index()
data.rename(columns={0: "frequency"}, inplace=True)
data.head()

with sns.axes_style('whitegrid'):

  grafico = sns.barplot(data=data, x="delivery_size", y="frequency", hue="region", palette="Accent")
  grafico.set(title='Peso da carga por frequência e região', xlabel='Peso da carga', ylabel='Frequência');
  grafico.get_legend().set_title("Região");
  grafico.figure.set_size_inches(w=30/2.54, h=20/2.54)

"""**Insights**

* O gráfico mostra que as entregas de peso leve (até 1000 kg) são as mais frequentes, representando cerca de 70% do total de entregas. As entregas de peso médio (1000 a 5000 kg) representam cerca de 20% do total de entregas. As entregas de peso pesado (mais de 5000 kg) representam cerca de 10% do total de entregas.

* O gráfico também mostra as diferenças na frequência de entregas por região. A região 0, que é a região central do Distrito Federal, apresenta a maior frequência de entregas de todos os pesos. A região 1, que é uma região mais periférica, apresenta uma frequência menor de entregas, principalmente para pesos pesados. A região 2, que é uma região rural, apresenta a menor frequência de entregas de todos os pesos.

<a id="section-5.6"></a>
# 5. 6. Insights

Analisando os gráficos gerados na etapa de visualização, conseguimos chegar às seguintes respostas para as questões levantadas na seção de [contexto](#section-1):

**1.   Qual é a distribuição do peso das entregas por região de origem? Há uma faixa de peso com maior frequência?**

- A maioria das entregas tem peso entre 3 e 8 (Seção 5.2). A região df-0 tem frequências menores para todas as faixas de peso, sugerindo a necessidade de avaliar o dimensionamento de veículos para essa região (Seção 5.5).

**2.   Quais são as regiões de destino com maior volume de entregas?**

- Desconsiderando registros incorretos para “Brasília”, as regiões com mais entregas são Taguatinga, Sudoeste/Octagonal, Ceilândia, Águas Claras e Guará (Seção 5.3.1). É necessário investigar os registros referenciando Brasília.

**3.   Quais são as regiões de origem com maior participação no volume total de entregas?**

-  Quase 90% das entregas originam-se nas regiões df-1 e df-2 (Seção 5.1). Isso reforça a sugestão de análise da frota para a região df-0.

---
"""